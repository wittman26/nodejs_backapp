        TradeSignature tradeSignature = TradeSignatureMapper.INSTANCE.fromDtoToTradeSignature(dto);
        tradeSignature.setEntity(entity);
        tradeSignature.setValidatedBo(VALIDATED_BO_DEFAULT);
        tradeSignature.setOrigin(isEventProduct(tradeSignature.getProductId()) ? ORIGIN_EVENT : ORIGIN_TRADE);


    private boolean isEventProduct(String productId) {
        return Arrays.asList("AN", "IN", "PC", "PS").contains(productId);
    }        
/************* */

package com.acelera.broker.fx.db.domain.dto;

import com.acelera.dto.AuditZonedFields;
import lombok.*;

import java.util.Collections;
import java.util.List;

@Data
@EqualsAndHashCode(callSuper = true)
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class TradeSignature extends AuditZonedFields {

    private Long tradeSignatureId;
    private String entity;
    private Long originId;
    private String origin;
    private String productId;
    private String signatureType;
    private String indicatorSSCC;
    private String validatedBo;
    private Long expedientId;
    @Getter(AccessLevel.NONE)
    private List<TradeSigner> tradeSignerList;

    public List<TradeSigner> getTradeSignerList() {
        return tradeSignerList != null ? tradeSignerList : Collections.emptyList();
    }
}

/*************** */

package com.acelera.fx.digitalsignature.application.service.mapper;

import com.acelera.broker.fx.db.domain.dto.TradeSignature;

import com.acelera.broker.fx.domain.dto.request.TradeSignatureRequest;
import com.acelera.fx.digitalsignature.domain.port.dto.TradeSignatureDto;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import org.mapstruct.ReportingPolicy;
import org.mapstruct.factory.Mappers;

@Mapper(uses = TradeSignerMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface TradeSignatureMapper {
    TradeSignatureMapper INSTANCE = Mappers.getMapper(TradeSignatureMapper.class);

    @Mapping(target = "indicatorSSCC", source = "indicatorSSCC", qualifiedByName = "booleanToString")
    @Mapping(target = "tradeSignerList", source = "signers")
    TradeSignature toTradeSignature(TradeSignatureRequest tradeSignatureRequest);

    @Mapping(target = "indicatorSSCC", source = "indicatorSSCC", qualifiedByName = "booleanToString")
    @Mapping(target = "tradeSignerList", source = "signers")
    TradeSignature fromDtoToTradeSignature(TradeSignatureDto tradeSignatureDto);

    @Named("booleanToString")
    static String mapBooleanToString(Boolean indicatorSSCC) {
        return Boolean.TRUE.equals(indicatorSSCC) ? "Y":"N";
    }
}