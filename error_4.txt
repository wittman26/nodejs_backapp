package com.acelera.fx.db.infrastructure.adapter.persistence.jpa.model;

import com.acelera.data.jpa.BaseAuditorJpa;
import lombok.*;

import javax.persistence.*;
import javax.validation.constraints.Size;
import java.util.List;

@Entity
@Table(name = "FX_TRADE_SIGNATURE")
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Setter
@Getter
public class TradeSignatureModel extends BaseAuditorJpa {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "TRADE_SIGNATURE_ID")
    private Long tradeSignatureId;

    @Size(max = 4)
    @Column(name = "ENTITY", nullable = false, length = 4)
    private String entity;

    @Column(name = "ORIGIN_ID", nullable = false)
    private Long originId;

    @Size(max = 20)
    @Column(name = "ORIGIN", nullable = false, length = 20)
    private String origin;

    @Size(max = 2)
    @Column(name = "PRODUCT_ID", nullable = false, length = 2)
    private String productId;

    @Size(max = 10)
    @Column(name = "SIGNATURE_TYPE", nullable = false, length = 10)
    private String signatureType;

    @Size(max = 1)
    @Column(name = "INDICATOR_SSCC", length = 1)
    private String indicatorSSCC;

    @Size(max = 10)
    @Column(name = "VALIDATED_BO", length = 10)
    private String validatedBo;

    @Column(name = "EXPEDIENT_ID")
    private Long expedientId;

    @OneToMany(mappedBy = "tradeSignatureModel", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
    private List<TradeSignerModel> tradeSignerList;
}

package com.acelera.fx.db.infrastructure.adapter.persistence.jpa.model;

import com.acelera.data.jpa.BaseAuditorJpa;
import lombok.*;

import javax.persistence.*;
import javax.validation.constraints.Size;

@Entity
@Table(name = "FX_TRADE_SIGNER")
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Setter
@Getter
public class TradeSignerModel extends BaseAuditorJpa {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "TRADE_SIGNER_ID")
    private Long tradeSignerId;

    @Size(max = 1)
    @Column(name = "DOCUMENT_TYPE", nullable = false, length = 1)
    private String documentType;

    @Size(max = 20)
    @Column(name = "DOCUMENT_NUMBER", nullable = false, length = 20)
    private String documentNumber;

    @Size(max = 10)
    @Column(name = "SIGNER_ID", nullable = false, length = 10)
    private String signerId;

    @Size(max = 200)
    @Column(name = "NAME", nullable = false, length = 200)
    private String name;

    @Size(max = 1)
    @Column(name = "IS_CLIENT", nullable = false, length = 1)
    private String isClient;

    @Size(max = 2)
    @Column(name = "INTERVENTION_TYPE", nullable = false, length = 2)
    private String interventionType;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TRADE_SIGNATURE_ID", referencedColumnName = "TRADE_SIGNATURE_ID")
    private TradeSignatureModel tradeSignatureModel;
}

@Repository
@RequiredArgsConstructor
public class JpaTradeSignatureRepositoryImpl implements TradeSignatureRepository {

    private final SpringJpaTradeSignatureRepository repository;

    @Override
    public TradeSignature save(TradeSignature tradeSignature) {
        TradeSignatureModel tradeSignatureModel = TradeSignatureMapper.INSTANCE.fromDomain(tradeSignature);

        if(tradeSignatureModel.getTradeSignerList()!= null) {
            tradeSignatureModel.getTradeSignerList()
                    .forEach(signer -> signer.setTradeSignatureModel(tradeSignatureModel));
        }

        var model = repository.save(tradeSignatureModel);
        return TradeSignatureMapper.INSTANCE.toDomain(model);
    }

    @Override
    public Optional<TradeSignature> find(TradeSignatureFindRequest request) {
        Optional<TradeSignatureModel> model;
        if(request.getTradeSignatureId() != null) {
             model = repository.findById(request.getTradeSignatureId());
        } else {
            model = repository.find(request);
        }
        return model.map(TradeSignatureMapper.INSTANCE::toDomain);
    }
}

2025-05-30 13:54:15.117  INFO [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [ctor-http-nio-3] c.a.b.shared.domain.RSocketProxyLogs     : server: {"correlationId":1748606055117326431,"route":"trade-signature.find","messageType":"request","rsocketType":"requestResponse","payload":{"tradeSignatureId":32,"entity":null,"originId":null,"productId":null},"metadata":{"acelera.ctx":{"entity":"0049","locale":"es_ES"}}}
2025-05-30 13:54:19.125 DEBUG [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] org.hibernate.SQL                        : 
    select
        tradesigna0_.trade_signature_id as trade_signature_id1_8_0_,
        tradesigna0_.fecalta as fecalta2_8_0_,
        tradesigna0_.fecmodi as fecmodi3_8_0_,
        tradesigna0_.usualta as usualta4_8_0_,
        tradesigna0_.usumodi as usumodi5_8_0_,
        tradesigna0_.entity as entity6_8_0_,
        tradesigna0_.expedient_id as expedient_id7_8_0_,
        tradesigna0_.indicator_sscc as indicator_sscc8_8_0_,
        tradesigna0_.origin as origin9_8_0_,
        tradesigna0_.origin_id as origin_id10_8_0_,
        tradesigna0_.product_id as product_id11_8_0_,
        tradesigna0_.signature_type as signature_type12_8_0_,
        tradesigna0_.validated_bo as validated_bo13_8_0_ 
    from
        ACELER_FX.fx_trade_signature tradesigna0_ 
    where
        tradesigna0_.trade_signature_id=?
2025-05-30 13:54:19.126 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [32]
2025-05-30 13:54:19.169 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([fecalta2_8_0_] : [TIMESTAMP]) - [2025-05-30T12:09:42.867158]
2025-05-30 13:54:19.169 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([fecmodi3_8_0_] : [TIMESTAMP]) - [2025-05-30T12:17:48.415170]
2025-05-30 13:54:19.169 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([usualta4_8_0_] : [VARCHAR]) - [uid:n11111]
2025-05-30 13:54:19.169 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([usumodi5_8_0_] : [VARCHAR]) - [uid:n11111]
2025-05-30 13:54:19.170 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([entity6_8_0_] : [VARCHAR]) - [0049]
2025-05-30 13:54:19.170 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([expedient_id7_8_0_] : [BIGINT]) - [null]
2025-05-30 13:54:19.170 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([indicator_sscc8_8_0_] : [VARCHAR]) - [N]
2025-05-30 13:54:19.170 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([origin9_8_0_] : [VARCHAR]) - [TRADE]
2025-05-30 13:54:19.170 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([origin_id10_8_0_] : [BIGINT]) - [123450]
2025-05-30 13:54:19.170 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([product_id11_8_0_] : [VARCHAR]) - [AW]
2025-05-30 13:54:19.170 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([signature_type12_8_0_] : [VARCHAR]) - [DIGITAL]
2025-05-30 13:54:19.170 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([validated_bo13_8_0_] : [VARCHAR]) - [PENDING]
2025-05-30 13:54:19.171 TRACE [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] org.hibernate.type.CollectionType        : Created collection wrapper: [com.acelera.fx.db.infrastructure.adapter.persistence.jpa.model.TradeSignatureModel.tradeSignerList#32]
2025-05-30 13:54:49.311 DEBUG [conac-springboot-fx-db,,] 11608 --- [     parallel-1] io.rsocket.FrameLogger                   : sending -> 
Frame => Stream ID: 0 Type: KEEPALIVE Flags: 0b10000000 Length: 14
Data:

2025-05-30 13:54:49.317 DEBUG [conac-springboot-fx-db,,] 11608 --- [     parallel-1] io.rsocket.FrameLogger                   : sending -> 
Frame => Stream ID: 0 Type: KEEPALIVE Flags: 0b10000000 Length: 14
Data:

2025-05-30 13:54:49.313  WARN [conac-springboot-fx-db,,] 11608 --- [onMonitorThread] c.h.s.i.o.impl.InvocationMonitor         : [10.0.0.38]:5702 [dev] [3.12.12] MonitorInvocationsTask delayed 29242 ms
2025-05-30 13:54:49.318  WARN [conac-springboot-fx-db,,] 11608 --- [onMonitorThread] c.h.s.i.o.impl.InvocationMonitor         : [10.0.0.38]:5702 [dev] [3.12.12] BroadcastOperationControlTask delayed 25600 ms
2025-05-30 13:54:49.320 ERROR [conac-springboot-fx-db,f07ef0eb015d25ae,96874cf4bf856d37] 11608 --- [oundedElastic-2] o.s.m.h.i.reactive.InvocableHelper       : No exception handling method

org.springframework.orm.jpa.JpaSystemException: failed to lazily initialize a collection of role: com.acelera.fx.db.infrastructure.adapter.persistence.jpa.model.TradeSignatureModel.tradeSignerList, could not initialize proxy - no Session; nested exception is org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.acelera.fx.db.infrastructure.adapter.persistence.jpa.model.TradeSignatureModel.tradeSignerList, could not initialize proxy - no Session
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:331) ~[spring-orm-5.3.31.jar:5.3.31]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:230) ~[spring-orm-5.3.31.jar:5.3.31]